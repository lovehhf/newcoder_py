# -*- coding:utf-8 -*-

__author__ = 'huanghf'

"""
弹幕是现今网络视频常见的评论方式，能够反映一个视频的火爆程度。
假设**某个时间一共有N条弹幕，每条弹幕i的持续时间为两个整数表示的时间区间(a[i],b[i])**，
我们定义**弹幕数量最多的一个时间段为最精彩时段**，求**一个视频的最精彩时段**。


输入描述:
第一行整数N,代表弹幕的条数，其中90%的 N < 1000000, 60%的N < 10000
第二行到第N+1行，是两个整数(a[i],b[i]),代表**每条弹幕的开始时间和结束时间**, 请注意(a[i],b[i])是全开区间, 并且a[i], b[i] < 100

输出描述:
M行，每行两个整数(c,d)，M是答案个数，(c,d)代表视频最精彩时段的开始时间和结束时间，并且M个答案区间互不重叠。答案请按照开始时间从小到大输出。
请注意每行结尾应包含换行符，包括最后一行。

输入例子1:
3
0 4
1 4
2 3

输出例子1:
2 3

输入例子2:
4
1 2
3 4
2 3
4 5

输出例子2:
1 2
2 3
3 4
4 5

输入例子3:
3
0 2
2 4
1 3

输出例子3:
1 2
2 3

例子说明3:
请注意由于**区间定义为开区间**，所以答案为(1,2)和(2,3)
"""


def solve(n, A):
    """
    超时 85%
    :param n:
    :param A:
    :return:
    """
    barrages = [0] * 100
    border = [0] * 100
    res = []
    # print(A)
    for i in range(n):
        l, r = A[i]
        barrages[l:r] = list(map(lambda x: x + 1, barrages[l:r]))
        border[r] += 1
    max_num = max(barrages)
    # i = barrages.index(max_num)  # 40~50 [72, 76, 75, 78, 80, 82, 83, 85, 83, 85]
    max_index = barrages.index(max_num)
    max_indexs = [max_index]
    for i in range(max_index + 1, 100):
        if barrages[i] == max_num and barrages[i - 1] != max_num:
            max_indexs.append(i)

    for i in max_indexs:
        for j in range(i + 1, 100):
            if barrages[j] == max_num and border[j] > 0:
                res.append((i, j))
                i = j
            if barrages[j] != max_num:
                res.append((i, j))
                break
    # print(max_num)
    # print(i)
    # print(barrages)
    # print(res)
    return res


def main():
    n = int(input())
    A = []
    for i in range(n):
        a, b = list(map(int, input().split()))
        A.append((a, b))
    ans = solve(n, A)
    for x, y in ans:
        print("%s %s" % (x, y))

def solve2():
    res = []
    barrages = [0] * 100
    border = [0] * 100
    n = int(input())
    A = []
    for i in range(n):
        l,r = [int(x) for x in input().split()]
        barrages[l:r] = [x+1 for x in barrages[l:r]]
        border[r] += 1
    max_num = max(barrages)
    max_index = barrages.index(max_num)
    max_indexs = [max_index]
    for i in range(max_index + 1, 100):
        if barrages[i] == max_num and barrages[i - 1] != max_num:
            max_indexs.append(i)

    for i in max_indexs:
        for j in range(i + 1, 100):
            if barrages[j] == max_num and border[j] > 0:
                res.append((i, j))
                i = j
            if barrages[j] != max_num:
                res.append((i, j))
                break
    print(res)

def test():
    n = 160
    A = [(0, 12), (0, 13), (0, 48), (1, 22), (1, 32), (1, 38), (2, 7), (2, 38), (3, 13), (3, 30), (3, 45), (5, 9), (5, 50), (5, 55), (6, 18), (6, 37), (6, 44), (7, 13), (7, 13), (7, 57), (8, 13), (8, 18), (8, 29), (9, 25), (9, 34), (9, 46), (10, 20), (10, 23), (10, 45), (10, 57), (10, 57), (10, 58), (11, 18), (12, 13), (12, 15), (12, 30), (12, 43), (12, 53), (13, 16), (14, 15), (14, 21), (14, 24), (14, 37), (15, 40), (15, 50), (15, 50), (16, 34), (16, 57), (17, 34), (17, 42), (18, 19), (18, 32), (18, 43), (18, 57), (18, 58), (18, 61), (19, 28), (19, 42), (19, 43), (19, 47), (19, 53), (19, 64), (20, 25), (20, 28), (20, 32), (20, 34), (20, 56), (20, 58), (21, 56), (21, 61), (22, 23), (22, 27), (23, 26), (23, 39), (23, 50), (24, 35), (24, 46), (24, 54), (24, 63), (25, 27), (25, 31), (25, 62), (25, 67), (26, 28), (26, 30), (26, 48), (26, 50), (26, 62), (26, 64), (27, 30), (27, 30), (27, 47), (27, 60), (28, 37), (29, 44), (29, 55), (29, 64), (29, 76), (30, 73), (31, 49), (31, 70), (31, 70), (32, 78), (33, 38), (33, 42), (33, 61), (33, 68), (34, 39), (34, 44), (35, 48), (35, 51), (35, 58), (35, 64), (36, 62), (36, 63), (36, 84), (37, 52), (37, 54), (37, 57), (37, 80), (37, 83), (37, 86), (38, 62), (39, 50), (39, 65), (40, 88), (41, 51), (41, 58), (41, 77), (41, 83), (42, 51), (42, 54), (43, 49), (43, 74), (43, 76), (43, 76), (43, 81), (43, 84), (44, 52), (44, 54), (44, 74), (44, 90), (44, 91), (45, 62), (45, 62), (45, 73), (45, 87), (46, 47), (46, 70), (46, 87), (47, 69), (47, 76), (47, 80), (47, 87), (47, 91), (48, 69), (49, 51), (49, 59), (49, 62), (49, 99)]
    print(solve(n, A))


test()
